{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar googleUrl = 'https://maps.google.com/maps/api/geocode/json';\n\nfunction format(raw) {\n  var address = {\n    position: {},\n    formattedAddress: raw.formatted_address || '',\n    feature: null,\n    streetNumber: null,\n    streetName: null,\n    postalCode: null,\n    locality: null,\n    country: null,\n    countryCode: null,\n    adminArea: null,\n    subAdminArea: null,\n    subLocality: null\n  };\n\n  if (raw.geometry && raw.geometry.location) {\n    address.position = {\n      lat: raw.geometry.location.lat,\n      lng: raw.geometry.location.lng\n    };\n  }\n\n  raw.address_components.forEach(function (component) {\n    if (component.types.indexOf('route') !== -1) {\n      address.streetName = component.long_name;\n    } else if (component.types.indexOf('street_number') !== -1) {\n      address.streetNumber = component.long_name;\n    } else if (component.types.indexOf('country') !== -1) {\n      address.country = component.long_name;\n      address.countryCode = component.short_name;\n    } else if (component.types.indexOf('locality') !== -1) {\n      address.locality = component.long_name;\n    } else if (component.types.indexOf('postal_code') !== -1) {\n      address.postalCode = component.long_name;\n    } else if (component.types.indexOf('administrative_area_level_1') !== -1) {\n      address.adminArea = component.long_name;\n    } else if (component.types.indexOf('administrative_area_level_2') !== -1) {\n      address.subAdminArea = component.long_name;\n    } else if (component.types.indexOf('sublocality') !== -1 || component.types.indexOf('sublocality_level_1') !== -1) {\n      address.subLocality = component.long_name;\n    } else if (component.types.indexOf('point_of_interest') !== -1 || component.types.indexOf('colloquial_area') !== -1) {\n      address.feature = component.long_name;\n    }\n  });\n  return address;\n}\n\nexport default {\n  geocodePosition: function geocodePosition(apiKey, position) {\n    if (!apiKey || !position || !position.lat || !position.lng) {\n      return Promise.reject(new Error(\"invalid apiKey / position\"));\n    }\n\n    return this.geocodeRequest(googleUrl + \"?key=\" + apiKey + \"&latlng=\" + position.lat + \",\" + position.lng);\n  },\n  geocodeAddress: function geocodeAddress(apiKey, address) {\n    if (!apiKey || !address) {\n      return Promise.reject(new Error(\"invalid apiKey / address\"));\n    }\n\n    return this.geocodeRequest(googleUrl + \"?key=\" + apiKey + \"&address=\" + encodeURI(address));\n  },\n  geocodeRequest: function geocodeRequest(url) {\n    var res, json;\n    return _regeneratorRuntime.async(function geocodeRequest$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(url));\n\n          case 2:\n            res = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(res.json());\n\n          case 5:\n            json = _context.sent;\n\n            if (!(!json.results || json.status !== 'OK')) {\n              _context.next = 8;\n              break;\n            }\n\n            return _context.abrupt(\"return\", Promise.reject(new Error(\"geocoding error \" + json.status + \", \" + json.error_message)));\n\n          case 8:\n            return _context.abrupt(\"return\", json.results.map(format));\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};","map":{"version":3,"names":["googleUrl","format","raw","address","position","formattedAddress","formatted_address","feature","streetNumber","streetName","postalCode","locality","country","countryCode","adminArea","subAdminArea","subLocality","geometry","location","lat","lng","address_components","forEach","component","types","indexOf","long_name","short_name","geocodePosition","apiKey","Promise","reject","Error","geocodeRequest","geocodeAddress","encodeURI","url","fetch","res","json","results","status","error_message","map"],"sources":["D:/2022-1/GEST.PROYECTOS/pocket-pet/frontend/node_modules/react-native-geocoder/js/googleApi.js"],"sourcesContent":["const googleUrl = 'https://maps.google.com/maps/api/geocode/json';\n\nfunction format(raw) {\n  const address = {\n    position: {},\n    formattedAddress: raw.formatted_address || '',\n    feature: null,\n    streetNumber: null,\n    streetName: null,\n    postalCode: null,\n    locality: null,\n    country: null,\n    countryCode: null,\n    adminArea: null,\n    subAdminArea: null,\n    subLocality: null,\n  };\n\n  if (raw.geometry && raw.geometry.location) {\n    address.position = {\n      lat: raw.geometry.location.lat,\n      lng: raw.geometry.location.lng,\n    }\n  }\n\n  raw.address_components.forEach(component => {\n    if (component.types.indexOf('route') !== -1) {\n      address.streetName = component.long_name;\n    }\n    else if (component.types.indexOf('street_number') !== -1) {\n      address.streetNumber = component.long_name;\n    }\n    else if (component.types.indexOf('country') !== -1) {\n      address.country = component.long_name;\n      address.countryCode = component.short_name;\n    }\n    else if (component.types.indexOf('locality') !== -1) {\n      address.locality = component.long_name;\n    }\n    else if (component.types.indexOf('postal_code') !== -1) {\n      address.postalCode = component.long_name;\n    }\n    else if (component.types.indexOf('administrative_area_level_1') !== -1) {\n      address.adminArea = component.long_name;\n    }\n    else if (component.types.indexOf('administrative_area_level_2') !== -1) {\n      address.subAdminArea = component.long_name;\n    }\n    else if (component.types.indexOf('sublocality') !== -1 || component.types.indexOf('sublocality_level_1') !== -1) {\n      address.subLocality = component.long_name;\n    }\n    else if (component.types.indexOf('point_of_interest') !== -1 || component.types.indexOf('colloquial_area') !== -1) {\n      address.feature = component.long_name;\n    }\n  });\n\n  return address;\n}\n\nexport default {\n  geocodePosition(apiKey, position) {\n    if (!apiKey || !position || !position.lat || !position.lng) {\n      return Promise.reject(new Error(\"invalid apiKey / position\"));\n    }\n\n    return this.geocodeRequest(`${googleUrl}?key=${apiKey}&latlng=${position.lat},${position.lng}`);\n  },\n\n  geocodeAddress(apiKey, address) {\n    if (!apiKey || !address) {\n      return Promise.reject(new Error(\"invalid apiKey / address\"));\n    }\n\n    return this.geocodeRequest(`${googleUrl}?key=${apiKey}&address=${encodeURI(address)}`);\n  },\n\n  async geocodeRequest(url) {\n    const res = await fetch(url);\n    const json = await res.json();\n\n    if (!json.results || json.status !== 'OK') {\n      return Promise.reject(new Error(`geocoding error ${json.status}, ${json.error_message}`));\n    }\n\n    return json.results.map(format);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}