{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport firebase from 'firebase';\nimport { saveMediaToStorage } from \"../../services/random\";\n\nrequire('firebase/firebase-auth');\n\nrequire('firebase/firestore');\n\nimport uuid from 'uuid-random';\nimport { USERS_DATA_STATE_CHANGE, USERS_POSTS_STATE_CHANGE, USER_POST_STATE_CHANGE, USER_STATE_CHANGES, CLEAR_DATA, CURRENT_USERS, USER_FAV_STATE_CHANGE, CLEAR_FAVS } from \"../constants\";\nimport { fetchPetsData } from '.';\nexport var createPost = function createPost(description, picture, fecha, situacion, estatura, accesorios, collar, tipo, petSelected) {\n  return function (dispatch) {\n    return new Promise(function (resolve, reject) {\n      if (picture != null) {\n        saveMediaToStorage(picture, \"post/\" + firebase.auth().currentUser.uid + \"/\" + uuid()).then(function (downloadUrl) {\n          firebase.firestore().collection('posts').doc(firebase.auth().currentUser.uid).collection('userPosts').add({\n            downloadUrl: downloadUrl,\n            description: description,\n            fecha: fecha,\n            situacion: situacion,\n            estatura: estatura,\n            accesorios: accesorios,\n            collar: collar,\n            tipo: tipo,\n            commentsCount: 0,\n            creation: firebase.firestore.FieldValue.serverTimestamp()\n          }).then(function () {\n            return resolve();\n          }).catch(function () {\n            return reject();\n          });\n        }).catch(function () {\n          return reject();\n        });\n      } else {\n        firebase.firestore().collection('posts').doc(firebase.auth().currentUser.uid).collection('userPosts').add({\n          downloadUrl: '',\n          description: description,\n          fecha: fecha,\n          situacion: situacion,\n          estatura: estatura,\n          accesorios: accesorios,\n          collar: collar,\n          tipo: tipo,\n          commentsCount: 0,\n          petSelected: petSelected,\n          creation: firebase.firestore.FieldValue.serverTimestamp()\n        }).then(function () {\n          return resolve();\n        }).catch(function () {\n          return reject();\n        });\n      }\n    });\n  };\n};\nexport var createFavorite = function createFavorite(id, user, userImage, image, fecha, info, descripcion, collar, estatura, accesorios) {\n  return function (dispatch) {\n    return new Promise(function (resolve, reject) {\n      firebase.firestore().collection('posts').doc(firebase.auth().currentUser.uid).collection('userFavorites').doc(id).set({\n        user: user,\n        userImage: userImage,\n        image: image,\n        fecha: fecha,\n        info: info,\n        descripcion: descripcion,\n        collar: collar,\n        estatura: estatura,\n        accesorios: accesorios\n      }).then(function () {\n        return resolve();\n      }).catch(function () {\n        return reject();\n      });\n    });\n  };\n};\nexport function clearData() {\n  return function (dispatch) {\n    dispatch({\n      type: CLEAR_DATA\n    });\n  };\n}\nexport function fetchUser() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"user\").doc(firebase.auth().currentUser.uid).get().then(function (snapshot) {\n      if (snapshot.exists) {\n        dispatch({\n          type: USER_STATE_CHANGES,\n          currentUser: snapshot.data()\n        });\n      } else {\n        console.log('doesnt exist');\n      }\n    });\n  };\n}\nexport function fetchUserPost() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"posts\").doc(firebase.auth().currentUser.uid).collection(\"userPosts\").orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      dispatch({\n        type: USER_POST_STATE_CHANGE,\n        posts: posts\n      });\n    });\n  };\n}\nexport function fetchUserFav() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"posts\").doc(firebase.auth().currentUser.uid).collection(\"userFavorites\").get().then(function (snapshot) {\n      var favs = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      dispatch({\n        type: USER_FAV_STATE_CHANGE,\n        favs: favs\n      });\n    });\n  };\n}\nexport function Initusuarios() {\n  return function (dispatch) {\n    firebase.firestore().collection('user').onSnapshot(function (snapshot) {\n      var users = snapshot.docs.map(function (doc) {\n        var id = doc.id;\n        return id;\n      });\n      dispatch({\n        type: CURRENT_USERS,\n        users: users\n      });\n\n      for (var i = 0; i < users.length; i++) {\n        dispatch(fetchUsersData(users[i], true));\n      }\n    });\n    firebase.firestore().collection('user').where('TipoUsuario', '==', 'Albergue').onSnapshot(function (snapshot) {\n      var users = snapshot.docs.map(function (doc) {\n        var id = doc.id;\n        return id;\n      });\n\n      for (var i = 0; i < users.length; i++) {\n        dispatch(fetchPetsData(users[i]));\n      }\n    });\n  };\n}\nexport function fetchUsersData(uid, getPosts) {\n  return function (dispatch, getState) {\n    var found = getState().usersState.users.some(function (el) {\n      return el.uid == uid;\n    });\n\n    if (!found) {\n      firebase.firestore().collection('user').doc(uid).get().then(function (snapshot) {\n        if (snapshot.exists) {\n          var user = snapshot.data();\n          user.uid = snapshot.id;\n          dispatch({\n            type: USERS_DATA_STATE_CHANGE,\n            user: user\n          });\n        } else {\n          console.log('doesnt exist');\n        }\n      });\n\n      if (getPosts) {\n        dispatch(fetchUsersPosts(uid));\n      }\n    }\n  };\n}\nexport function fetchUsersPosts(uid) {\n  return function (dispatch, getState) {\n    firebase.firestore().collection('posts').doc(uid).collection('userPosts').orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      var uid = snapshot.docs[0].ref.path.split('/')[1];\n      var user = getState().usersState.users.find(function (el) {\n        return el.uid == uid;\n      });\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread(_objectSpread({\n          id: id\n        }, data), {}, {\n          user: user\n        });\n      });\n      dispatch({\n        type: USERS_POSTS_STATE_CHANGE,\n        posts: posts,\n        uid: uid\n      });\n    }).catch(function (error) {});\n  };\n}","map":{"version":3,"names":["firebase","saveMediaToStorage","require","uuid","USERS_DATA_STATE_CHANGE","USERS_POSTS_STATE_CHANGE","USER_POST_STATE_CHANGE","USER_STATE_CHANGES","CLEAR_DATA","CURRENT_USERS","USER_FAV_STATE_CHANGE","CLEAR_FAVS","fetchPetsData","createPost","description","picture","fecha","situacion","estatura","accesorios","collar","tipo","petSelected","dispatch","Promise","resolve","reject","auth","currentUser","uid","then","downloadUrl","firestore","collection","doc","add","commentsCount","creation","FieldValue","serverTimestamp","catch","createFavorite","id","user","userImage","image","info","descripcion","set","clearData","type","fetchUser","get","snapshot","exists","data","console","log","fetchUserPost","orderBy","posts","docs","map","fetchUserFav","favs","Initusuarios","onSnapshot","users","i","length","fetchUsersData","where","getPosts","getState","found","usersState","some","el","fetchUsersPosts","ref","path","split","find","error"],"sources":["D:/2022-1/GEST.PROYECTOS/pocket-pet/frontend/src/redux/actions/post.js"],"sourcesContent":["import firebase from 'firebase'\r\nimport { saveMediaToStorage } from '../../services/random';\r\nrequire('firebase/firebase-auth')\r\nrequire('firebase/firestore')\r\nimport uuid from 'uuid-random'\r\nimport { USERS_DATA_STATE_CHANGE, USERS_POSTS_STATE_CHANGE, USER_POST_STATE_CHANGE, USER_STATE_CHANGES, CLEAR_DATA, CURRENT_USERS, USER_FAV_STATE_CHANGE, CLEAR_FAVS } from '../constants';\r\nimport { fetchPetsData } from '.';\r\n\r\nexport const createPost = (description, picture, fecha, situacion, estatura, accesorios, collar, tipo, petSelected) => dispatch => new Promise((resolve, reject) => {\r\n    if (picture != null) {\r\n        saveMediaToStorage(picture, `post/${firebase.auth()\r\n            .currentUser.uid}/${uuid()}`)\r\n            .then((downloadUrl) => {\r\n                firebase.firestore()\r\n                    .collection('posts')\r\n                    .doc(firebase.auth().currentUser.uid)\r\n                    .collection('userPosts')\r\n                    .add({\r\n                        //creator: firebase.auth().currentUser.uid,\r\n                        downloadUrl,\r\n                        description,\r\n                        fecha,\r\n                        situacion,\r\n                        estatura,\r\n                        accesorios,\r\n                        collar,\r\n                        tipo,\r\n                        commentsCount: 0,\r\n                        creation: firebase.firestore.FieldValue.serverTimestamp() //Esto recuperará el \"momento\" del Firebase\r\n                    })\r\n                    .then(() => resolve())\r\n                    .catch(() => reject())\r\n            })\r\n            .catch(() => reject())\r\n    }\r\n    //ESTGO ES SOLO PARA PROBAR EL POST2 --< SE MODIFICARA LUEGO\r\n    else {\r\n        firebase.firestore()\r\n            .collection('posts')\r\n            .doc(firebase.auth().currentUser.uid)\r\n            .collection('userPosts')\r\n            .add({\r\n                //creator: firebase.auth().currentUser.uid,\r\n                downloadUrl: '',\r\n                description,\r\n                fecha,\r\n                situacion,\r\n                estatura,\r\n                accesorios,\r\n                collar,\r\n                tipo,\r\n                commentsCount: 0,\r\n                petSelected,\r\n                creation: firebase.firestore.FieldValue.serverTimestamp() //Esto recuperará el \"momento\" del Firebase\r\n            })\r\n            .then(() => resolve())\r\n            .catch(() => reject())\r\n    }\r\n}\r\n);\r\n//--------------------------------------------//\r\nexport const createFavorite = (id, user, userImage, image, fecha, info, descripcion, collar, estatura, accesorios) => dispatch => new Promise((resolve, reject) => {\r\n    firebase.firestore()\r\n        .collection('posts')\r\n        .doc(firebase.auth().currentUser.uid)\r\n        .collection('userFavorites')\r\n        .doc(id)\r\n        .set({\r\n            user,\r\n            userImage,\r\n            image,\r\n            fecha,\r\n            info,\r\n            descripcion,\r\n            collar,\r\n            estatura,\r\n            accesorios\r\n        })\r\n        .then(() => resolve())\r\n        .catch(() => reject())\r\n}\r\n);\r\n\r\n//--------------------------------------------//\r\nexport function clearData() {\r\n    return ((dispatch) => {\r\n        dispatch({ type: CLEAR_DATA })\r\n    })\r\n}\r\n///-------------------------------------------//\r\nexport function fetchUser() {\r\n    return ((dispatch) => {\r\n        firebase.firestore()\r\n            .collection(\"user\")\r\n            .doc(firebase.auth().currentUser.uid)\r\n            .get()\r\n            .then((snapshot) => {\r\n                if (snapshot.exists) {\r\n                    dispatch({ type: USER_STATE_CHANGES, currentUser: snapshot.data() })\r\n                } else {\r\n                    console.log('doesnt exist')\r\n                }\r\n            })\r\n    })\r\n}\r\n//funcion para obtener las publicaciones del usuario actual\r\nexport function fetchUserPost() {\r\n    return ((dispatch) => {\r\n        firebase.firestore()\r\n            .collection(\"posts\")\r\n            .doc(firebase.auth().currentUser.uid)\r\n            .collection(\"userPosts\")\r\n            .orderBy(\"creation\", \"asc\")\r\n            .get()\r\n            .then((snapshot) => {\r\n                let posts = snapshot.docs.map(doc => {\r\n                    const data = doc.data();\r\n                    const id = doc.id;\r\n                    return { id, ...data }\r\n                })\r\n                //console.log(posts)\r\n                dispatch({ type: USER_POST_STATE_CHANGE, posts })\r\n            })\r\n    })\r\n}\r\n//----------------------------------------------------------------------//\r\nexport function fetchUserFav() {\r\n    return ((dispatch) => {\r\n        firebase.firestore()\r\n            .collection(\"posts\")\r\n            .doc(firebase.auth().currentUser.uid)\r\n            .collection(\"userFavorites\")\r\n            .get()\r\n            .then((snapshot) => {\r\n                let favs = snapshot.docs.map(doc => {\r\n                    const data = doc.data();\r\n                    const id = doc.id;\r\n                    return { id, ...data }\r\n                })\r\n                //console.log(favs)\r\n                //dispatch({ type: CLEAR_FAVS })\r\n                dispatch({ type: USER_FAV_STATE_CHANGE, favs })\r\n            })\r\n    })\r\n}\r\n//----------------------------------------------------------------------//\r\nexport function Initusuarios() {\r\n    return ((dispatch) => {\r\n        firebase.firestore()\r\n            .collection('user')\r\n            .onSnapshot((snapshot) => {\r\n                let users = snapshot.docs.map(doc => {\r\n                    const id = doc.id;\r\n                    return id\r\n                })\r\n\r\n                dispatch({ type: CURRENT_USERS, users })\r\n                for (let i = 0; i < users.length; i++) {\r\n                    dispatch(fetchUsersData(users[i], true))                    \r\n                }\r\n            });\r\n        firebase.firestore()\r\n            .collection('user')\r\n            .where('TipoUsuario','==','Albergue')\r\n            .onSnapshot((snapshot) => {\r\n                let users = snapshot.docs.map(doc => {\r\n                    const id = doc.id;\r\n                    return id\r\n                })\r\n                \r\n                for (let i = 0; i < users.length; i++) {\r\n                    dispatch(fetchPetsData(users[i]))\r\n                    \r\n                }\r\n        })\r\n    })\r\n}\r\n\r\n\r\n//--------------------------------------------------------------------//\r\nexport function fetchUsersData(uid, getPosts) {\r\n    return ((dispatch, getState) => {\r\n        const found = getState().usersState.users.some(el => el.uid == uid);\r\n        if (!found) {\r\n\r\n            firebase.firestore()\r\n                .collection('user')\r\n                .doc(uid)\r\n                .get()\r\n                .then((snapshot) => {\r\n                    if (snapshot.exists) {\r\n                        let user = snapshot.data();\r\n                        user.uid = snapshot.id;\r\n                        dispatch({ type: USERS_DATA_STATE_CHANGE, user });\r\n                    } else {\r\n                        console.log('doesnt exist')\r\n                    }\r\n                })\r\n            if (getPosts) {\r\n                dispatch(fetchUsersPosts(uid))\r\n            }\r\n        }\r\n    })\r\n\r\n}\r\n\r\nexport function fetchUsersPosts(uid) {\r\n\r\n    return ((dispatch, getState) => {\r\n        firebase.firestore()\r\n            .collection('posts')\r\n            .doc(uid)\r\n            .collection('userPosts')\r\n            .orderBy(\"creation\", \"asc\")\r\n            .get()\r\n            .then((snapshot) => {\r\n                const uid = snapshot.docs[0].ref.path.split('/')[1];\r\n                const user = getState().usersState.users.find(el => el.uid == uid)\r\n                let posts = snapshot.docs.map(doc => {\r\n                    const data = doc.data()\r\n                    const id = doc.id\r\n                    return { id, ...data, user }\r\n                })\r\n\r\n                //console.log(posts)\r\n                dispatch({ type: USERS_POSTS_STATE_CHANGE, posts, uid })\r\n            }).catch((error) => {\r\n\r\n            })\r\n    })\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}