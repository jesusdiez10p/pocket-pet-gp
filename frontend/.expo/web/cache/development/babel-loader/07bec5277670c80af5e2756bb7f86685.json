{"ast":null,"code":"import NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport GoogleApi from \"./googleApi.js\";\nvar RNGeocoder = NativeModules.RNGeocoder;\nexport default {\n  apiKey: null,\n  fallbackToGoogle: function fallbackToGoogle(key) {\n    this.apiKey = key;\n  },\n  geocodePosition: function geocodePosition(position) {\n    var _this = this;\n\n    if (!position || !position.lat || !position.lng) {\n      return Promise.reject(new Error(\"invalid position: {lat, lng} required\"));\n    }\n\n    return RNGeocoder.geocodePosition(position).catch(function (err) {\n      if (!_this.apiKey) {\n        throw err;\n      }\n\n      return GoogleApi.geocodePosition(_this.apiKey, position);\n    });\n  },\n  geocodeAddress: function geocodeAddress(address) {\n    var _this2 = this;\n\n    if (!address) {\n      return Promise.reject(new Error(\"address is null\"));\n    }\n\n    return RNGeocoder.geocodeAddress(address).catch(function (err) {\n      if (!_this2.apiKey) {\n        throw err;\n      }\n\n      return GoogleApi.geocodeAddress(_this2.apiKey, address);\n    });\n  }\n};","map":{"version":3,"names":["GoogleApi","RNGeocoder","NativeModules","apiKey","fallbackToGoogle","key","geocodePosition","position","lat","lng","Promise","reject","Error","catch","err","geocodeAddress","address"],"sources":["D:/2022-1/GEST.PROYECTOS/pocket-pet/frontend/node_modules/react-native-geocoder/js/geocoder.js"],"sourcesContent":["import { NativeModules } from 'react-native';\nimport GoogleApi from './googleApi.js';\n\nconst { RNGeocoder } = NativeModules;\n\nexport default {\n  apiKey: null,\n\n  fallbackToGoogle(key) {\n    this.apiKey = key;\n  },\n\n  geocodePosition(position) {\n    if (!position || !position.lat || !position.lng) {\n      return Promise.reject(new Error(\"invalid position: {lat, lng} required\"));\n    }\n\n    return RNGeocoder.geocodePosition(position).catch(err => {\n      if (!this.apiKey) { throw err; }\n      return GoogleApi.geocodePosition(this.apiKey, position);\n    });\n  },\n\n  geocodeAddress(address) {\n    if (!address) {\n      return Promise.reject(new Error(\"address is null\"));\n    }\n\n    return RNGeocoder.geocodeAddress(address).catch(err => {\n      if (!this.apiKey) { throw err; }\n      return GoogleApi.geocodeAddress(this.apiKey, address);\n    });\n  },\n}\n"],"mappings":";AACA,OAAOA,SAAP;AAEA,IAAQC,UAAR,GAAuBC,aAAvB,CAAQD,UAAR;AAEA,eAAe;EACbE,MAAM,EAAE,IADK;EAGbC,gBAHa,4BAGIC,GAHJ,EAGS;IACpB,KAAKF,MAAL,GAAcE,GAAd;EACD,CALY;EAObC,eAPa,2BAOGC,QAPH,EAOa;IAAA;;IACxB,IAAI,CAACA,QAAD,IAAa,CAACA,QAAQ,CAACC,GAAvB,IAA8B,CAACD,QAAQ,CAACE,GAA5C,EAAiD;MAC/C,OAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,uCAAV,CAAf,CAAP;IACD;;IAED,OAAOX,UAAU,CAACK,eAAX,CAA2BC,QAA3B,EAAqCM,KAArC,CAA2C,UAAAC,GAAG,EAAI;MACvD,IAAI,CAAC,KAAI,CAACX,MAAV,EAAkB;QAAE,MAAMW,GAAN;MAAY;;MAChC,OAAOd,SAAS,CAACM,eAAV,CAA0B,KAAI,CAACH,MAA/B,EAAuCI,QAAvC,CAAP;IACD,CAHM,CAAP;EAID,CAhBY;EAkBbQ,cAlBa,0BAkBEC,OAlBF,EAkBW;IAAA;;IACtB,IAAI,CAACA,OAAL,EAAc;MACZ,OAAON,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,iBAAV,CAAf,CAAP;IACD;;IAED,OAAOX,UAAU,CAACc,cAAX,CAA0BC,OAA1B,EAAmCH,KAAnC,CAAyC,UAAAC,GAAG,EAAI;MACrD,IAAI,CAAC,MAAI,CAACX,MAAV,EAAkB;QAAE,MAAMW,GAAN;MAAY;;MAChC,OAAOd,SAAS,CAACe,cAAV,CAAyB,MAAI,CAACZ,MAA9B,EAAsCa,OAAtC,CAAP;IACD,CAHM,CAAP;EAID;AA3BY,CAAf"},"metadata":{},"sourceType":"module"}